# Importa as bibliotecas
import pickle
import streamlit as st
import numpy as np
import pandas as pd
import data_handler
import matplotlib.pyplot as plt
import util
import requests
import json

print("Abriu a p√°gina")

# verifica se a senha de acesso est√° correta
if not util.check_password():
    # se a senha estiver errada, para o processamento do app
    print("Usuario n√£o logado")
    st.stop()

print("Carregou a p√°gina")    

# primeiro de tudo, carrega os dados da diabete para um dataframe
#dados = data_handler.load_data()

# Carrega o modelo
#model_diabetes = pickle.load(open('modelo/modelo_diabetes.pkl', 'rb'))

API_URL = "http://localhost:8000"

# faz uma requisi√ß√£o da API para obter todos os dados do CSV
response = requests.get(API_URL + "/get_diabete_data") 
dados = None
# verifica se o status de retorno da requisi√ß√£o √© 200, que significa sucesso
if response.status_code == 200:
    # se sim, carrega o retorno que est√° vindo em formato json
    dados_json = json.loads(response.json())
    # transforma o json em um dataframe com todos os dados
    dados = pd.DataFrame(dados_json)
else: 
    print("Erro ao buscar os dados dos pacientes")

# Tpitulo
st.title('Predi√ß√£o de diabetes')

data_analyses_on = st.toggle('Exibir an√°lise dos dados')

if data_analyses_on:
    # essa parte √© s√≥ um exmplo de que √© poss√≠vel realizar diversas visualiza√ß√µes e plotagens com o streamlit
    st.header('Dados da diabete - Dataframe')
    
    # exibe todo o dataframe dos dados do titanic
    st.dataframe(dados)

    # plota um histograma das idades dos pacientes
    st.header('Histograma das idades')
    fig = plt.figure()
    plt.hist(dados['Age'], bins=10)
    plt.xlabel('Idade')
    plt.ylabel('Quantidade')
    st.pyplot(fig)

    # plota um gr√°fico de barras com a contagem dos sobreviventes
    st.header('Diab√©ticos')
    st.bar_chart(dados.Outcome.value_counts())

# Define a primeira linha dos inputs
col1, col2, col3 = st.columns(3)

with col1 :
  Gestacoes = st.number_input('Informe a quantidade de gesta√ß√µes')

with col2 :
  Glicose = st.number_input('Informe a concentra√ß√£o de glicose')
  
with col3 :
  Pressao = st.number_input('Informe a press√£o sangu√≠nea')

# Define a segunda linha dos inputs
col1, col2, col3 = st.columns(3)

with col1 :
  EspessuraPele = st.number_input('Informe a espessura da pele (mm)')

with col2 :
  Insulina = st.number_input('Informe a concentra√ß√£o de insulina')

with col3 :
  IMC = st.number_input('Informe o IMC')

# Define a terceira linha dos inputs
col1, col2, col3 = st.columns(3)

with col1 :
  FuncaoDiabate = st.number_input('Informe a fun√ß√£o do diabetes')

with col2 :
  Idade = st.number_input('Informe a idade')

with col3 : 
  submit = st.button('Predi√ß√£o')  
  

# Se clicou no bot√£o de predi√ß√£o
if submit or 'diabetes' in st.session_state:
  
  paciente = {
        'Pregnancies': Gestacoes,
        'Glucose': Glicose,
        'BloodPressure': Pressao,
        'SkinThickness': EspessuraPele,
        'Insulin': Insulina,
        'BMI': IMC,
        'DiabetesPedigreeFunction': FuncaoDiabate,
        'Age': Idade
    }

  #values = pd.DataFrame([paciente])
  #print(values) 

  # realiza a predi√ß√£o para saber se o paciente tem ou n√£o diabetes com base nos par√¢metros informados
  #results = model_diabetes.predict(values)
  #print(results)

  # converte o dict do paciente em json para enviar para a API
  paciente_json = json.dumps(paciente)

  # realiza um post request para a API, passando o paciente como parametro para realizar a predi√ß√£o de diabetes
  response = requests.post(API_URL + "/predict", json=paciente_json) 
  result = None
  # verifica o status de sucesso da requisi√ß√£o
  if response.status_code == 200:
      # se houve sucesso, quer dizer que a API tem um resultado
      result = response.json()
  else: 
      print("Erro ao chamar a predi√ß√£o")
  
  # verifica se o resultado n√£o √© nulo
  if result is not None:
      diabetes = result
      # verifica se o paciente tem ou n√£o diabetes
      if diabetes == 1:
          # se sim, exibe uma mensagem que o paciente tem diabetes
          st.subheader('O paciente tem diabetes! üò¢')
          if 'diabetes' not in st.session_state:
              st.snow() 
      else:
          # se n√£o, exibe uma mensagem que o paciente n√£o tem diabetes
          st.subheader('O paciente n√£o tem diabetes üòÉüôåüèª')
          if 'diabetes' not in st.session_state:
              st.balloons()
      
      # salva no cache da aplica√ß√£o se o paciente tem diabetes
      st.session_state['diabetes'] = diabetes

  # verifica se existe um paciente e se j√° foi verificado se ele √© ou n√£o diab√©tico
  if paciente and 'diabetes' in st.session_state:
      # se sim, pergunta ao usu√°rio se a predi√ß√£o est√° certa e salva essa informa√ß√£o
      st.write("A predi√ß√£o est√° correta?")
      col1, col2, col3 = st.columns([1,1,5])
      with col1:
          correct_prediction = st.button('üëçüèª')
      with col2:
          wrong_prediction = st.button('üëéüèª')
      
      # exibe uma mensagem para o usu√°rio agradecendo o feedback
      if correct_prediction or wrong_prediction:
          message = "Muito obrigado pelo feedback"
          if wrong_prediction:
              message += ", iremos usar esses dados para melhorar as predi√ß√µes"
          message += "."
          
          # adiciona no dict do paciente se a predi√ß√£o est√° correta ou n√£o
          if correct_prediction:
              paciente['CorrectPrediction'] = True
          elif wrong_prediction:
              paciente['CorrectPrediction'] = False
              
          # adiciona no dict do paciente se ele tem ou n√£o diabetes
          paciente['diabetes'] = st.session_state['diabetes']
          
          # escreve a mensagem na tela
          st.write(message)
          
          # salva a predi√ß√£o no JSON para c√°lculo das m√©tricas de avalia√ß√£o do sistema
          #data_handler.save_prediction(paciente)

          # converte o dict do paciente para json
          paciente_json = json.dumps(paciente)
          # realiza um post request para a API salvar a predi√ß√£o, passando o json do paciente como parametro
          response = requests.post(API_URL + "/save_prediction", json=paciente_json)
          # verifica o retorno da API
          if response.status_code == 200:
              print("Predi√ß√£o salva")
          else: 
              print("Erro ao salvar predi√ß√£o")

  st.write('')
  # adiciona um bot√£o para permitir o usu√°rio realizar uma nova an√°lise
  col1, col2, col3 = st.columns(3)
  with col2:
      new_test = st.button('Iniciar Nova An√°lise')
      
      # se o usu√°rio pressionar no bot√£o e j√° existe um paciente, remove ele do cache
      if new_test and 'diabetes' in st.session_state:
          del st.session_state['diabetes']
          st.rerun()   

# calcula e exibe as m√©tricas de avalia√ß√£o do modelo
# aqui, somente a acur√°ria est√° sendo usada
# TODO: adicionar as mesmas m√©tricas utilizadas na disciplina de treinamento e valida√ß√£o do modelo (recall, precision, F1-score)
accuracy_predictions_on = st.toggle('Exibir acur√°cia')

if accuracy_predictions_on:
    # pega todas as predi√ß√µes salvas no JSON
    #predictions = data_handler.get_all_predictions()

    # envia um get request para pegar todas as predi√ß√µes j√° salvas na API
    response = requests.get(API_URL + "/get_all_predictions") 
    predictions = None
    # verifica se o status de retorno √© de sucesso
    if response.status_code == 200:
        predictions = response.json()
    else: 
        print("Erro ao buscar predi√ß√µes")

    # salva o n√∫mero total de predi√ß√µes realizadas
    num_total_predictions = len(predictions)
    
    # calcula o n√∫mero de predi√ß√µes corretas e salva os resultados conforme as predi√ß√µes foram sendo realizadas
    accuracy_hist = [0]
    # salva o numero de predi√ß√µes corretas
    correct_predictions = 0
    # percorre cada uma das predi√ß√µes, salvando o total m√≥vel e o n√∫mero de predi√ß√µes corretas
    for index, paciente in enumerate(predictions):
        total = index + 1
        if paciente['CorrectPrediction'] == True:
            correct_predictions += 1
            
        # calcula a acurracia movel
        temp_accuracy = correct_predictions / total if total else 0
        # salva o valor na lista de historico de acuracias
        accuracy_hist.append(round(temp_accuracy, 2)) 
    
    # calcula a acuracia atual
    accuracy = correct_predictions / num_total_predictions if num_total_predictions else 0
    
    # exibe a acuracia atual para o usu√°rio
    st.metric(label='Acur√°cia', value=round(accuracy, 2))
    # TODO: usar o attr delta do st.metric para exibir a diferen√ßa na varia√ß√£o da acur√°cia
    
    # exibe o hist√≥rico da acur√°cia
    st.subheader("Hist√≥rico de acur√°cia")
    st.line_chart(accuracy_hist)               
